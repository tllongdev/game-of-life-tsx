{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["numRows","Math","floor","window","innerHeight","numCols","innerWidth","operations","generateEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","className","onClick","random","style","display","gridTemplateColumns","map","col","key","newGrid","width","height","backgroundColor","undefined","border","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.831fea9a.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react'\nimport produce from 'immer'\nimport './App.css'\n\nconst numRows = Math.floor(window.innerHeight / 20)\nconst numCols = Math.floor(window.innerWidth / 20)\n\nconst operations = [\n\t[0, 1],\n\t[0, -1],\n\t[1, 1],\n\t[-1, -1],\n\t[1, 0],\n\t[-1, 0],\n\t[1, -1],\n\t[-1, 1],\n]\n\nconst generateEmptyGrid = () => {\n\tconst rows = []\n\tfor (let i = 0; i < numRows; i++) {\n\t\trows.push(Array.from(Array(numCols), () => 0))\n\t}\n\n\treturn rows\n}\n\nconst App: React.FC = () => {\n\tconst [grid, setGrid] = useState(() => {\n\t\treturn generateEmptyGrid()\n\t})\n\n\tconst [running, setRunning] = useState(false)\n\n\tconst runningRef = useRef(running)\n\trunningRef.current = running\n\n\tconst runSimulation = useCallback(() => {\n\t\tif (!runningRef.current) {\n\t\t\treturn\n\t\t}\n\n\t\tsetGrid(g => {\n\t\t\treturn produce(g, gridCopy => {\n\t\t\t\tfor (let i = 0; i < numRows; i++) {\n\t\t\t\t\tfor (let k = 0; k < numCols; k++) {\n\t\t\t\t\t\tlet neighbors = 0\n\t\t\t\t\t\toperations.forEach(([x, y]) => {\n\t\t\t\t\t\t\tconst newI = i + x\n\t\t\t\t\t\t\tconst newK = k + y\n\t\t\t\t\t\t\tif (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n\t\t\t\t\t\t\t\tneighbors += g[newI][newK]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tif (neighbors < 2 || neighbors > 3) {\n\t\t\t\t\t\t\tgridCopy[i][k] = 0\n\t\t\t\t\t\t} else if (g[i][k] === 0 && neighbors === 3) {\n\t\t\t\t\t\t\tgridCopy[i][k] = 1\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\n\t\tsetTimeout(runSimulation, 100)\n\t}, [])\n\n\treturn (\n\t\t<>\n\t\t\t<div className='App'>\n\t\t\t\t<div className='controls'>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetRunning(!running)\n\t\t\t\t\t\t\tif (!running) {\n\t\t\t\t\t\t\t\trunningRef.current = true\n\t\t\t\t\t\t\t\trunSimulation()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{running ? 'stop' : 'start'}\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tconst rows = []\n\t\t\t\t\t\t\tfor (let i = 0; i < numRows; i++) {\n\t\t\t\t\t\t\t\trows.push(\n\t\t\t\t\t\t\t\t\tArray.from(Array(numCols), () =>\n\t\t\t\t\t\t\t\t\t\tMath.random() > 0.7 ? 1 : 0\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tsetGrid(rows)\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\trandom\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetGrid(generateEmptyGrid())\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tclear\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tdisplay: 'grid',\n\t\t\t\t\t\tgridTemplateColumns: `repeat(${numCols}, 20px)`,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{grid.map((rows, i) =>\n\t\t\t\t\t\trows.map((col, k) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={`${i}-${k}`}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tconst newGrid = produce(grid, gridCopy => {\n\t\t\t\t\t\t\t\t\t\tgridCopy[i][k] = grid[i][k] ? 0 : 1\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\tsetGrid(newGrid)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\twidth: 18,\n\t\t\t\t\t\t\t\t\theight: 16,\n\t\t\t\t\t\t\t\t\tbackgroundColor: grid[i][k]\n\t\t\t\t\t\t\t\t\t\t? `rgba(${Math.floor(Math.random() * 250)}, 166, 153, 0.${\n\t\t\t\t\t\t\t\t\t\t\t\tMath.floor(Math.random() * 600) + 400\n\t\t\t\t\t\t\t\t\t\t  })`\n\t\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\t\tborder: 'solid 1px #DCDCDC',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}